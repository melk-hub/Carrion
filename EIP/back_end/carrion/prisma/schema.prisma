generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid()) @db.Uuid
  username           String             @unique
  email              String             @unique
  password           String
  hasProfile         Boolean            @default(false)
  createdAt          DateTime           @default(now())
  role               Role               @default(VISITOR)
  jobApplies         jobApply[]         @relation("UserJobApplies")
  archivedJobApplies ArchivedJobApply[] @relation("UserArchivedJobApplies")
  userProfile        UserProfile?       @relation("UserProfile")
  Settings           Settings?          @relation("UserSettings")
  hashedRefreshToken String?            @unique
  tokens             Token[]            @relation("UserTokens")
  userAchievements   UserAchievement[]  @relation("UserAchievements")
  notifications      Notification[]     @relation("UserNotifications")
}

model UserProfile {
  userId              String    @id @db.Uuid
  firstName           String?
  lastName            String?
  birthDate           DateTime? @db.Date
  school              String?
  city                String?
  phoneNumber         String?
  personalDescription String?
  portfolioLink       String?
  linkedin            String?
  goal                String?
  contractSought      String[]
  locationSought      String[]
  sector              String[]
  resume              String?
  user                User      @relation("UserProfile", fields: [userId], references: [id], onDelete: Cascade)
}

model Token {
  id                String   @id @default(uuid()) @db.Uuid
  name              String
  accessToken       String
  refreshToken      String
  tokenTimeValidity DateTime
  externalId        String?
  createdAt         DateTime @default(now())
  userId            String   @db.Uuid
  user              User     @relation("UserTokens", fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(uuid()) @db.Uuid
  userId    String           @db.Uuid
  type      NotificationType
  company   String
  title     String
  message   String
  createdAt DateTime         @default(now())
  read      Boolean          @default(false)
  user      User             @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
}

model jobApply {
  id            String    @id @default(uuid()) @db.Uuid
  title         String
  company       String
  location      String?
  salary        Int?
  user          User      @relation("UserJobApplies", fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @db.Uuid
  status        Status
  imageUrl      String?
  createdAt     DateTime  @default(now())
  contractType  String?
  interviewDate DateTime?
}

model ArchivedJobApply {
  id            String    @id @default(uuid()) @db.Uuid
  originalId    String    @db.Uuid
  title         String
  company       String
  location      String?
  salary        Int?
  status        Status
  imageUrl      String?
  contractType  String?
  interviewDate DateTime?
  archivedAt    DateTime  @default(now())
  userId        String    @db.Uuid
  user          User      @relation("UserArchivedJobApplies", fields: [userId], references: [id], onDelete: Cascade)
}

model Settings {
  id          String   @id @default(uuid())
  userId      String   @unique @db.Uuid
  document    String[]
  imageUrl    String?
  weeklyGoal  Int      @default(10)
  monthlyGoal Int      @default(30)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // --- UNIQUE MODIFICATION ---
  User        User     @relation("UserSettings", fields: [userId], references: [id], onDelete: Cascade)
}

model CarrionAchievement {
  id          String              @id @default(uuid()) @db.Uuid
  title       String
  description String
  category    AchievementCategory
  type        AchievementType
  threshold   Int?
  condition   String?
  points      Int                 @default(10)
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  users       UserAchievement[]   @relation("AchievementUsers")
}

model UserAchievement {
  id            String             @id @default(uuid()) @db.Uuid
  userId        String             @db.Uuid
  achievementId String             @db.Uuid
  unlockedAt    DateTime           @default(now())
  progress      Int?               @default(0)
  user          User               @relation("UserAchievements", fields: [userId], references: [id], onDelete: Cascade)
  achievement   CarrionAchievement @relation("AchievementUsers", fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

enum Status {
  APPLIED
  PENDING
  INTERVIEW_SCHEDULED
  TECHNICAL_TEST
  AWAITING_DECISION
  OFFER_RECEIVED
  NEGOTIATION
  OFFER_ACCEPTED
  REJECTED_BY_COMPANY
  OFFER_DECLINED
  APPLICATION_WITHDRAWN
}

enum Role {
  ADMIN
  USER
  MANAGER
  DEV
  VISITOR
}

enum AchievementCategory {
  APPLICATIONS
  INTERVIEWS
  SUCCESS
  STREAK
  PROFILE
  INTERACTION
  MILESTONE
  SEASONAL
}

enum AchievementType {
  COUNT
  STREAK
  PERCENTAGE
  TIME_BASED
  SPECIAL
}

enum NotificationType {
  SUCCESS
  ERROR
  WARNING
  INFO
  DEFAULT
}