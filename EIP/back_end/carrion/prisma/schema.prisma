generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_1")
}

model User {
  id                 String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username           String     @unique
  firstName          String
  lastName           String?
  email              String     @unique
  password           String?
  birthDate          DateTime?
  createdAt          DateTime   @default(now())
  role               Role       @default(VISITOR)
  hashedRefreshToken String?    @unique
  Settings           Settings?  @relation("UserSettings")
  tokens             Token[]    @relation("UserTokens")
  jobApplies         jobApply[] @relation("UserJobApplies")
}

model Token {
  id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String
  accessToken       String
  refreshToken      String
  tokenTimeValidity DateTime
  externalId        String?  // historyId for Gmail, subscriptionId for Outlook
  createdAt         DateTime @default(now())
  userId            String   @db.Uuid
  user              User     @relation("UserTokens", fields: [userId], references: [id])
}

model jobApply {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  Title         String
  Company       String
  Location      String?
  Salary        Int?
  UserId        String    @db.Uuid
  status        Status
  imageUrl      String?
  createdAt     DateTime  @default(now())
  contractType  String?
  interviewDate DateTime?
  User          User      @relation("UserJobApplies", fields: [UserId], references: [id], onDelete: Cascade)
}

model Settings {
  id       String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  UserId   String   @unique @db.Uuid
  document String[]
  imageUrl String?
  user     User     @relation("UserSettings", fields: [UserId], references: [id], onDelete: Cascade)
}

enum Status {
  APPLIED
  PENDING
  INTERVIEW_SCHEDULED
  TECHNICAL_TEST
  AWAITING_DECISION
  OFFER_RECEIVED
  NEGOTIATION
  OFFER_ACCEPTED
  REJECTED_BY_COMPANY
  OFFER_DECLINED
  APPLICATION_WITHDRAWN
}

enum Role {
  ADMIN
  USER
  MANAGER
  DEV
  VISITOR
}
