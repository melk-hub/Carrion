generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// The User model should only contain core authentication and identity info.
// First name and last name have been REMOVED from this model.
model User {
  id                 String             @id @default(uuid()) @db.Uuid
  username           String             @unique
  email              String             @unique
  password           String
  hasProfile         Boolean            @default(false)
  createdAt          DateTime           @default(now())
  role               Role               @default(VISITOR)
  jobApplies         jobApply[]         @relation("UserJobApplies")
  userProfile        UserProfile?       @relation("UserProfile")
  Settings           Settings?          @relation("UserSettings")
  hashedRefreshToken String?            @unique
  tokens             Token[]            @relation("UserTokens")
  archivedJobApplies ArchivedJobApply[] @relation("UserArchivedJobApplies")
}

model UserProfile {
  userId              String    @unique @db.Uuid
  firstName           String?
  lastName            String?
  birthDate           DateTime? @db.Date
  school              String?
  city                String?
  phoneNumber         String?
  personalDescription String?
  portfolioLink       String?
  linkedin            String?
  goal                String?
  contractSought      String[]
  locationSought      String[]
  sector              String[]
  resume              String?
  user                User      @relation("UserProfile", fields: [userId], references: [id])
}

model Token {
  id                String   @id @default(uuid()) @db.Uuid
  name              String
  accessToken       String
  refreshToken      String
  tokenTimeValidity DateTime
  externalId        String?  // historyId for Gmail, subscriptionId for Outlook
  createdAt         DateTime @default(now())
  userId            String   @db.Uuid
  user              User     @relation("UserTokens", fields: [userId], references: [id], onDelete: Cascade)
}

model jobApply {
  id            String    @id @default(uuid()) @db.Uuid
  Title         String
  Company       String
  Location      String?
  Salary        Int?
  User          User      @relation("UserJobApplies", fields: [UserId], references: [id], onDelete: Cascade)
  UserId        String    @db.Uuid
  status        Status
  imageUrl      String?
  createdAt     DateTime  @default(now())
  contractType  String?
  interviewDate DateTime?
}

model ArchivedJobApply {
  id            String   @id @default(uuid()) @db.Uuid
  originalId    String   @db.Uuid
  title         String
  company       String
  location      String?
  salary        Int?
  status        Status
  imageUrl      String?
  contractType  String?
  interviewDate DateTime?
  archivedAt    DateTime @default(now())
  userId        String   @db.Uuid
  user          User     @relation("UserArchivedJobApplies", fields: [userId], references: [id], onDelete: Cascade)
}

model Settings {
  id       String   @id @default(uuid()) @db.Uuid
  UserId   String   @unique @db.Uuid
  document String[]
  imageUrl String?
  user     User     @relation("UserSettings", fields: [UserId], references: [id], onDelete: Cascade)
}

enum Status {
  APPLIED
  PENDING
  INTERVIEW_SCHEDULED
  TECHNICAL_TEST
  AWAITING_DECISION
  OFFER_RECEIVED
  NEGOTIATION
  OFFER_ACCEPTED
  REJECTED_BY_COMPANY
  OFFER_DECLINED
  APPLICATION_WITHDRAWN
}

enum Role {
  ADMIN
  USER
  MANAGER
  DEV
  VISITOR
}